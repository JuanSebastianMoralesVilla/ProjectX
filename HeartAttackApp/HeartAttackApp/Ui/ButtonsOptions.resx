<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btn_solve.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        +bSoiizgvQAAAABJRU5ErkJggg==
</value>
  </data>
</root>